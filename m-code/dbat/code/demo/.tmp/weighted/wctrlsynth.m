
IO=[3.6166399289523;-2.60894879978285;7.45894633491931;-0.0045703615907946;4.25952801227461e-05;2.15838853197523e-06;6.56858062844679e-05;2.97019478450458e-05;0;0;7.25319;5.43764;2272;1704;313.306363013834;313.306363013834];
EO=[0.454890193309206 0.470426037918475 -0.644455107249993 ...
    -0.643655758267815 -0.670769054920637 -0.713593395300778 -0.534726847838257 -0.71894109494196 0.524909589566225 0.554111604497192 1.7700719944937 1.86489954128973 1.6306319764072 1.79683766167638 1.67165783255085 1.69404565030723 0.424528414446315 0.481966639749299 0.461866185328913 0.701783157602928 0.268717205393477;1.79376090602025 2.02724413431155 1.46641915962734 1.49103366434685 0.417346284563237 0.476372594629295 -0.349536091337039 -0.466478006910469 -0.54328049960191 -0.593287983700588 -0.425193480876391 -0.480971467801278 0.497601869562692 0.525347014516016 1.55452107567932 1.61940250182067 0.82302883854884 0.926766630986917 0.578853736990593 0.782358186928598 0.821199113575367;1.4692883770138 1.63879774786743 1.58149998779414 1.63706746107372 1.41040026894271 1.46483137993177 1.40370323508085 1.71507612532705 1.53421663833304 1.61712624916919 1.55259311535748 1.61405928919333 1.47159429553625 1.59832248844945 1.5013662328691 1.59001703958983 1.97215778663114 1.88533589828433 1.87537895512373 1.92616840071205 1.90569136346224;-0.688110772972344 -0.693965485183417 -0.475420946507987 -0.498433809556506 0.0764884471021699 0.036611194851682 0.477318108614503 0.469901504083708 0.530394513801856 0.541185952996544 0.482309957638608 0.430225385553101 0.00917304051030163 -0.030364846488917 -0.53695999520137 -0.521609652469254 -0.148789868241419 -0.0834279752457289 -0.077033282094131 -0.132745302645756 -0.151796752170073;-0.020608878882325 -0.0322337806565934 -0.498559868659942 -0.529390170889215 -0.605097442373389 -0.593718400958849 -0.493981232425064 -0.490924646288328 0.00332698604654915 0.0301932623602339 0.536693347887466 0.527779928331264 0.578574968232875 0.587053481652395 0.491714262527318 0.470808222531352 -0.0090057648068322 0.0116310870530761 -0.00718759709466076 -0.0271620489085898 0.0183243545853728;-3.1387876522162 -1.57291490599352 -2.47569095445207 -0.868902284318454 -1.52082690873533 0.0263456508740482 -0.771573110878504 0.783071792070137 0.00147793782674272 1.56276522863689 0.738896873284978 2.32485295342415 1.54819594363997 3.14512100412471 2.41606049263777 -2.34977517341268 3.13105604572472 1.54961798133937 1.54015519099724 -3.14248050818813 -3.18722438858761;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
OP=[0.285718029108756 0.428618254560639 0.142973640061467 0.571348903611777 ...
    0.000123685594838535 0.714054316273237 -0.14267896166737 0.856973060780575 0.999808261419682 1.14255411860358 0.285785170531356 0.428532231742944 0.142930864942516 0.571373216173995 0.714088051836849 -0.142668386074574 0.856971934128674 1.1425867700965 0.285874879743914 0.143009031433426 0.428614419594465 0.000209162706766725 0.571405359220536 -0.142512572872125 0.714194330349893 0.856920513063765 0.999786965634394 1.14254672275562 -0.14252099662849 0.000226689162134355 0.143164297336638 0.285892109235999 0.428686790198603 0.856944361256076 0.57157241946188 0.714227309067747 0.999812135665894 1.14264091273185 0.143168958105501 0.285896475031529 -0.142486045543372 0.428851261055514 0.856924377598911 0.000376578261350149 0.999864845676111 0.714258070676211 1.14265967831075 0.571620380118898 -0.142363992835052 0.000386490245743329 1.14261379620779 0.999837823170808 0.143255826402804 0.285926086574936 0.428693641417517 0.857008931209713 0.714242920287381 0.5715926181467 1.14257947626753 -0.142415013927828 0.000415162570452076 0.999811262391279 0.143132172328428 0.285905691525358 0.856970916529477 0.428687170507404 0.714120716549529 0.571546753566861 1.14262330365737 -0.142478283794065 0.999824699160662 0.000259697003617925 0.857021555257502 0.143232232533156 0.714117936568858 0.28598774865518 0.428798626053213 0.571378599849916 1.14257650329804 -0.14249587626254 0.856971793844136 0.143040423792745 0.285783185600442 0.428697327955367 0.714235592574963 0.571507840464506 1.14260932045964 0.999839095590871 -0.142615965641595 0.857066526771893 0.00017392945306344 0.71422791666935 0.143008320267268 0.285760338597329 0.571382994568762 0.428689907984388 0 1 0 1;1.14302542746221 1.1430988482983 1.14311944807951 1.14315718315361 1.14311493666792 1.14313191538407 1.14307431367856 1.14312855086498 1.14314684142528 1.14318652978027 1.00009580594484 1.00015222670531 1.00013894460201 1.00015862356176 1.00015611102306 1.00011194777452 1.0001656416832 1.0001449177697 0.857193291190043 0.857204275165762 0.857209224554785 0.857208426027752 0.85722245396668 0.857149535558545 0.857208994266484 0.857263014756378 0.857204657566307 0.857218131310031 0.714222212524065 0.714266005647703 0.714255833360319 0.714250110760309 0.714282365187333 0.714294513149166 0.71426366880068 0.71426905544231 0.714249112214785 0.714278059454626 0.571374648420643 0.57136942391956 0.571330942463952 0.571370168861319 0.571395346921005 0.571365165651601 0.571330888551357 0.571360826445107 0.571307250045739 0.571332114222182 0.428525633596739 0.428548492857771 0.428419824921465 0.428416384992897 0.428490085981322 0.428493066464844 0.42852935167976 0.428478867887045 0.428446989616862 0.428450079487936 0.28566870378825 0.285689944993282 0.285698569995479 0.2856215078324 0.285768381816865 0.285713277158066 0.285674363964728 0.285748191944295 0.285702553861391 0.28565012637418 0.14272327050352 0.142817135424766 0.142701908220832 0.142822849359784 0.14277273021629 0.142814804815261 0.142815964098127 0.142772240617922 0.142820264129844 0.142846319959398 -0.000140775446804942 -0.000192524723774606 -9.03384667025398e-05 -2.92965344059122e-05 -1.42838031879983e-05 -5.65399606619894e-06 -0.000128394542940791 -0.000106690552659103 -0.142975647024464 -0.143032932343918 -0.14301692416777 -0.142959288878902 -0.143009694118366 -0.142939080877415 -0.14288462539154 -0.14284452224742 -0.142825885702142 -0.142825294945779 1 1 0 0;-0.000987419526709541 -0.000236574125791132 -0.000817264216912055 0.000777643941501953 -0.000839114344517925 0.000247863381903014 -0.000519062424242244 0.000193928186556391 -0.00137509145027443 -0.000528872387355339 -0.00025905343886556 0.00011163380186613 -0.000618752303053427 0.0012589983718704 0.000532638795574107 0.000467635557879453 0.000359616979501918 -0.00101722865562283 0.000149778042977081 1.76525243984955e-07 0.000374476103910442 0.000543398277938245 0.00227086537925649 0.000481839795191076 0.00231041594042694 0.000586710756497013 -2.57015688050616e-05 -0.000871985400860604 -1.03159356191729e-06 0.000994826798143972 0.00093479962325142 0.000375925885108736 0.000440839200100307 0.000595465288684728 0.00372312622513812 0.0024267774727547 -0.00065480281001555 0.00235879855291832 0.000963365031246646 0.000999832567854363 0.0040132920781309 0.00140206089355279 0.000715096527255209 0.0034569430073632 0.000967140284259452 0.00230355184226713 0.00210150765890338 0.00412040438959647 0.000572549734592361 0.000716325929664323 0.000400554054485494 0.00019439823718243 0.00191979936485052 0.000413230930402322 0.000429630114770383 8.13615925126305e-05 0.00117636216639804 0.00292580648228958 -0.00101455563337198 0.000793652283104278 0.00044754602857119 -0.000543813109924602 0.000511920104872086 -0.000112141864204158 -0.000384767201058592 0.000167814011061091 -5.84510518174947e-05 0.00164525350195421 -0.000900538373949832 0.000340093257829283 -4.61112709034649e-05 0.000274357031615683 -0.000580458821220191 0.000703989686755338 -0.000340843507889482 0.000343248074118854 -9.65090696840336e-05 0.000349499269938348 -0.00197482183181035 0.00190842781517232 -0.00166198008841938 -8.38571079092566e-05 -0.000690937218286911 -0.000926022961103588 -4.25838971477497e-05 0.000535628869974004 -0.00271562306487947 -0.00250541465506491 0.00154000405785275 -0.00215178564594511 0.000408103047132392 -0.00189745014557357 -0.000484988864057284 -0.00156139592689329 -0.00177982594149676 -0.00163321730017518 0 0 0 0];
OP=round(OP*7)/7;
OPid=[2:97,1001:1004];
OPctrl=OPid>1000;

OPkeep=ismember(OPid,[5,15,35,55]) | OPctrl | true;
OP=OP(:,OPkeep);
OPid=OPid(OPkeep);
OPctrl=OPctrl(OPkeep);

IO(4:8)=0;
EO=EO(:,1:20);

K0=diag([-IO(3),-IO(3),1]);
K0(1:2,3)=IO(1:2);
K0=diag([1,-1,1])*K0;
K=diag([IO(end-1:end);1])*K0;

images=1:size(EO,2);
%images=[1,3];

mAll=cell(1,length(images));
mVis=cell(1,length(images));

vis=false(size(OP,2),size(EO,2));

for ii=1:length(images)
    imNo=images(ii);
    R=pm_eulerrotmat(EO(4:6,imNo));
    C=EO(1:3,imNo);
    P0=R*[eye(3),-C];
    P=K*P0;

    mAll{imNo}=euclidean(P*homogeneous(OP));
    vis(:,imNo)=mAll{imNo}(1,:)>0 & mAll{imNo}(1,:)<IO(end-3) & ...
              mAll{imNo}(2,:)>0 & mAll{imNo}(2,:)<IO(end-2);
    mVis{imNo}=mAll{imNo}(:,vis(:,imNo));
    
    subplot(floor(sqrt(length(images))),ceil(sqrt(length(images))),ii)
    plot(mAll{imNo}(1,:),mAll{imNo}(2,:),'x-')
    axis equal ij
    axis([0,IO(end-3),0,IO(end-2)])
    if 0
        hold on
        plot(mAll{imNo}(1,~vis(:,imNo)),mAll{imNo}(2,~vis(:,imNo)),'ro-')
        axis tight
        hold off
    end
end

ss=struct('title','Synthetic camera calibration data');
ss.imDir='';
ss.imNames=cell(1,size(EO,2));
ss.IO=IO;
ss.IOobs=IO;
ss.IOstd=zeros(size(IO));
ss.IOcov=[];
ss.EO=EO;
ss.EOobs=EO;
ss.EOstd=zeros(size(EO));
ss.EOcov=[];
ss.cams=ones(1,size(EO,2));
ss.OP=OP;
ss.OPobs=OP;
ss.OPstd=zeros(size(OP));
ss.OPcov=[];
ss.OPid=OPid(:);
ss.isCtrl=OPctrl;
ss.vis=vis;
ss.colPos=reshape(cumsum(vis(:)),size(vis)).*vis;
ss.markPts=cat(2,mVis{:});
% Use same data as Photomodeler gets.
ss.markPts=reshape(sscanf(sprintf('%.10g ',ss.markPts),'%g'),size(ss.markPts));
ss.markStd=ones(size(ss.markPts));
ss.ptCams=ones(1,size(ss.markPts,2));
ss.estIO=false(size(IO));
ss.estEO=repmat((1:7)'<7,1,size(EO,2));
ss.estEO(:,~ismember(1:size(EO,2),images))=false;
ss.estOP=repmat(~OPctrl,3,1);
ss.useIOobs=true(size(IO));
ss.useEOobs=false(size(EO));
ss.useOPobs=repmat(OPctrl,3,1);
ss.nK=3;
ss.nP=2;
ss.camUnit='mm';
ss.objUnit='m';
ss.x0desc='';

cpId=ss.OPid(ss.isCtrl);
ss1=resect(ss,'all',cpId,1,0,cpId);
ss2=forwintersect(ss1,'all',true);

s=ss2;

h=plotnetwork(s,'title','Initial network',...
              'axes',tagfigure(sprintf('network%d',i)),...
              'camsize',0.1);

dampings={'gna'};

result=cell(size(dampings));
ok=nan(size(dampings));
iters=nan(size(dampings));
sigma0=nan(size(dampings));
E=cell(size(dampings));

for i=1:length(dampings)
    fprintf('Running the bundle with damping %s...\n',dampings{i});

    % Run the bundle.
    [result{i},ok(i),iters(i),sigma0(i),E{i}]=bundle(s,dampings{i},'trace');
    
    if ok(i)
        fprintf('Bundle ok after %d iterations with sigma0=%.2f pixels\n', ...
                iters(i),sigma0(i));
    else
        fprintf(['Bundle failed after %d iterations. Last sigma0 estimate=%.2f ' ...
                 'pixels\n'],iters(i),sigma0(i));
    end
end

resFile=fullfile(pwd,'data','unweighted_dbat_out.txt');

COP=bundle_result_file(result{1},E{1},resFile);

fprintf('\nBundle result file %s generated.\n',resFile);

h=plotparams(result{1},E{1});

if printdemofigures
    figDir=fullfile('..','docsrc','manual','ill');
    files={'ccamiotrace.eps','ccameotrace.eps','ccamoptrace.eps', ...
           'ccamgnatrace.eps'};
    for i=1:length(h)
        print(h(i),'-depsc2',fullfile(figDir,files{i}));
    end
end

h=plotcoverage(result{1},true);

if printdemofigures
    figDir=fullfile('..','docsrc','manual','ill');
    files={'ccamcoverage.eps'};
    for i=1:length(h)
        print(h(i),'-depsc2',fullfile(figDir,files{i}));
    end
end

h=plotimagestats(result{1},E{1});

if printdemofigures
    figDir=fullfile('..','docsrc','manual','ill');
    files={'ccamimstats.eps'};
    for i=1:length(h)
        print(h(i),'-depsc2',fullfile(figDir,files{i}));
    end
end

h=plotopstats(result{1},E{1},COP);

if printdemofigures
    figDir=fullfile('..','docsrc','manual','ill');
    files={'ccamopstats.eps'};
    for i=1:length(h)
        print(h(i),'-depsc2',fullfile(figDir,files{i}));
    end
end

if printdemofigures, doPause=0; else doPause='on'; end

for i=1:length(E)
    h=plotparams(result{i},E{i},'noio','noeo','noop');
    fig=tagfigure(sprintf('network%d',i));
    fprintf('Displaying bundle iteration playback for method %s in figure %d.\n',E{i}.damping.name,double(fig));
    h=plotnetwork(result{i},E{i},'title',...
                  ['Damping: ',dampings{i},'. Iteration %d of %d'], ...
                  'axes',fig,'pause',doPause,'camsize',0.1); 
end

if printdemofigures
    h=get(h,'parent');
    figDir=fullfile('..','docsrc','manual','ill');
    files={'ccamxfinal.eps'};
    for i=1:length(h)
        print(h(i),'-depsc2',fullfile(figDir,files{i}));
    end
end
